<?php

namespace Vend\Api;

use Offshoot\HttpClient;

class Client
{

    const API_URI = 'https://%s.vendhq.com/api';

    /** @var string */
    protected $storeName;

    /**
     * the permanenet access token generated by Vend
     * @var string
     */
    protected $accessToken;

    /**
     * the shared secret created by Vend
     * @var string
     */
    protected $sharedSecret;

    /**
     * the http client used to make requests to the Vend api
     * @var HttpClient
     */
    protected $httpClient;

    /**
     * initialize the API client
     * @param HttpClient $client
     */
    public function __construct(HttpClient $client)
    {
        $this->httpClient = $client;
    }

    /**
     * set the store name
     * @param string $storeName
     */
    public function setStoreName($storeName)
    {
        $this->storeName = $storeName;
    }

    /**
     * set the permanent access token returned by Vend API
     * @param string $token
     */
    public function setAccessToken($token)
    {
        $this->accessToken = $token;
    }

    /**
     * set the shared secret
     * @param string
     */
    public function setClientSecret($secret)
    {
        $this->sharedSecret = $secret;
    }

    /**
     * make a GET request to the Vend API
     * @param string $resource
     * @param array $params
     * @return \stdClass
     */
    public function get($resource, array $params = array())
    {
        return $this->makeApiRequest($resource, $params);
    }

    /**
     * make a POST request to the Vend API
     * @param string $resource
     * @param array $data
     * @return \stdClass
     */
    public function post($resource, array $data = array())
    {
        return $this->makeApiRequest($resource, $data, HttpClient::POST);
    }

    /**
     * returns true if the supplied request params are valid
     * @return boolean
     */
    public function isValidRequest(array $params)
    {
        // at this point, we don't have the required logic for validating
        // a vend request
        return true;
    }

    /**
     * get the base URI for the api
     * @return string
     */
    protected function getApiUri()
    {
        return sprintf(self::API_URI, $this->getStoreName());
    }

    /**
     * make a generic request to the api
     * @param string $resource
     * @param array $params
     * @param string $method
     * @return \stdClass
     */
    protected function makeApiRequest(
        $resource, array $params = array(), $method = HttpClient::GET
    ) {

        $uri = $this->getApiUri() . '/' . ltrim($resource, '/');

        $this->getHttpClient()->addHeader(
            'Authorization',
            "Bearer {$this->getAccessToken()}"
        );

        $this->getHttpClient()->addHeader('Content-Type', 'application/json');
        $this->getHttpClient()->addHeader('Accept', 'application/json');

        switch ($method) {
            case HttpClient::GET:
                $response = $this->getHttpClient()->get($uri, $params);
                break;
            case HttpClient::POST:
                $data = json_encode($params);
                $response = $this->getHttpClient()->post($uri, $data);
                break;
            case 'PUT':
            case 'DELETE':
            default:
                throw new \RuntimeException(
                    'Currently only "GET" and "POST" are supported. "PUT" and '
                    . '"DELETE" functionality is currently under development'
                );
        }

        $response = json_decode($response);

        if (isset($response->errors)) {
            throw new \RuntimeException($response->errors);
        } elseif (isset($response->error)) {
            throw new \RuntimeException($response->error);
        }

        return new Response($response);

    }

    /**
     * get the HTTP Client
     * @return HttpClient
     */
    protected function getHttpClient()
    {
        return $this->httpClient;
    }

    /**
     * get the access token
     * @return string
     */
    protected function getAccessToken()
    {
        return $this->accessToken;
    }

    /**
     * get the shared secret
     * @return string
     */
    protected function getClientSecret()
    {
        return $this->sharedSecret;
    }

    /**
     * get the store name
     * @return string
     */
    protected function getStoreName()
    {
        return $this->storeName;
    }

}
